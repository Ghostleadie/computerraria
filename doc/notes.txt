My personal messy notes for while I'm doing things

Instruction numbers: 
0110111: 7
0010111: 9
1101111: 1
1100111: 3
1100011: 0
0000011: 10
0100011: 4
0010011: 11
0110011: 5
0001111: 8

Commands: 
ALU:
0-1: Load 2
0-2: Load 1
0-3: exec
6-0: funct3[0]
6-1: funct3[1]
6-2: funct3[2]
6-3: dir, i1
Registers: 
1-2: Store
1-3: Load
Memory: 
2-1: store address
2-2: Execute
2-3: Load/store, i1
PC: 
3-0: Store
3-1: Load 
3-2: Load (reserved for base instruction logic)
3-3: Increment
Decoder: 
4-0: Write rd
4-1: Read rs2
4-2: Read rs1
5-2: Load immediate
5-3: Load instr
Control unit: 
7-0: Clock
7-1: Instruction finished
Aligner:
1-0: Align load
1-1: Store 2 least significant bits
7-3: Store funct3, WARNING: no sync
8-1: Store data to store
8-2: Align store
Misc: 
0-0: Increment data bus
4-3: Store add to funct3, WARNING: no sync
8-0: Load tmp
8-3: Store tmp

Registers:
0x1E1FC (write only):
0: Write screen

0x1E1F8 (read only):
0: Down
1: Left
2: Right
3: Up

Notes on registers: 
- Use 32 bit binary tree multiplexer
- Two logic gates per bit, 1 for loading and the other for storing
- Duplicated binary tree to allow a read and write in one iteration
- Can't easily allow two reads in one iteration, so instructions with rs1 and rs2 aren't allowed

Notes on memory: 
- Massive binary tree structure for selection, bottom layer is load/store select
- Address is cached both to deal with colour problems and because reads need two data bus inputs
- Same memory structure as registers with 2 gates for each bit, although much more compact

Notes on adder: 
- Could just use a 3 to 8 multiplexer for 1 bit adders, but I'd like something nicer
- Output of adder is xor of all three inputs A, B and C which is implicit with wiring, carry is harder
- Carry is determined with following equation: C_out = (A&B)^(A^B if C) which is easy to implement in faulty logic
- To get subtraction simply invert B's bits to and set first carry for two's complement
- In my implementation B is toggled back after operation, although since operands aren't expected to be reused strictly speaking this is unnecessary

Notes on comparator: 
- Was lazy and didn't think through things myself: http://lumetta.web.engr.illinois.edu/120-S17/slide-copies/053-2's-complement-comparator.pdf
- If dir is 1 then actually less than or equal, useful for conditional branches

Notes on AND/OR/XOR:
- Went for a super compact design
- xor xors, and zeros then ands, or xors then ands

Notes on equalitator: 
- Definitely not a word
- Not part of original ALU requirements but is required for BEQ/BNE
- Encoded as funct3=001, dir=1 since that's only free combination
- Doesn't bother to zero other bits, so sets last bit 0 if neq and 1 if eq

Notes on decoder:
- Multiplexes opcodes out
- Immediate loading is done as efficiently as possible by reusing common overlap
- Load instr signal tells decoder to cache registers, functX, etc. so that data bas can be reused

Notes on PC: 
- Increment loads as well to enable one clock cycle jumps
- Wire colour scheme for increment has convoluted colour sharer circuit for previous design that tried to increment and load in one iteration
- A bit of a mess, leaving as is for now since I might realize I've made a mistake in terms of pc loading timing

Notes on aligner: 
- Not the best put together, kinda hacky
- Completely undefined behavior for misaligned reads, be careful!!!

Notes on control unit: 
- Instructions are responsible for incrementing pc since some instructions want to do that later or earlier

Instruction programming
Prelude (common to all instructions)
Load PC
Store address and set mem to read
Mem exec
Load instr

OP-IMM
Load imm
ALU store 1
Load rs1
ALU store 2
ALU exec
Incr pc

LUI
Load imm
Store rd
Incr pc

AUIPC
Load imm
ALU store 2
Read pc
ALU store 1
ALU exec
Store rd
Incr pc

JAL
Load imm
ALU store 2
Read pc
Incr db
Store rd
Delay
Read pc
ALU store 1
ALU exec
Store pc

JALR
Load imm
ALU store 2
Read rs1
ALU store 1
Load PC
Incr db
Store rd
ALU exec
Set lsb of db to 0
Store pc

OP
Load rs2
ALU store 2
Delay
Load rs1
ALU store 1
ALU exec
Store rd
Incr PC

LOAD
Load imm and store funct3 to align
ALU store 2
Load rs1 and store add to funct3
ALU store 1
ALU exec
Store 2 lsbs
Delay
Mem store addr
Mem exec
Align load
Write rd
Incr pc

STORE
Load imm and store funct3 to align
ALU store 2
Load rs1
ALU store 1
ALU exec
Store 2 lsbs
Delay
If funct3[1]==1 
    Mem store address
    Load rs2
    goto last delay
Mem store addr
Load rs2
Store store data
Mem exec
Put store onto db
Delay
Mem exec and set mem to write
Incr pc

BRANCH
Load imm
Store tmp
Load rs1
Store ALU 1/2
Delay
Load rs2
Store ALU 2/1
Load proper funct3
ALU exec
If db[0]==0
    Incr pc
    finish
Load tmp
Delay
Store ALU 2
Load pc
Store ALU 1 and set ALU to add
ALU exec
Store pc


# RAM/ROM Overhaul Notes

RAM/ROM
47 rows
24 rom, 23 ram

Screen: 176x96

ROM: 0x0-0xC0000, i.e. 768kb
RAM: 0x100000-0x15BFFF, i.e. 368kb
Peripherals: starting at 0x200000
Color screen: 0x200000
Color update: 0x203FFC (end of of 0x204000 region)
Old screen: 0x20E000
Old screen update: 0x20E1FC
Old screen input: 0x20E1F8



